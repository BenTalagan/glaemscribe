\**

Glǽmscribe (also written Glaemscribe) is a software dedicated to
the transcription of texts between writing systems, and more 
specifically dedicated to the transcription of J.R.R. Tolkien's 
invented languages to some of his devised writing systems.

Copyright (C) 2015 Benjamin Babut (Talagan).

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

**\

\** Telerin mode for glaemscribe (MAY BE INCOMPLETE) - Derived from Quenya **\

\beg changelog
  \entry "0.0.2" "Correcting ts/ps sequences to work better with eldamar"
  \entry "0.0.3" "Porting to virtual chars"
  \entry "0.0.4" "Added charset support for Annatar"
  \entry "0.0.5" "Added support for the FreeMonoTengwar font" 
  \entry "0.0.6" "Ported some options from the quenya mode"
  \entry "0.1.0" "Added support for the Tengwar Elfica font"
  \entry "0.1.1" "Added support for inlined raw tengwar"  
\end

\language "Telerin"
\writing  "Tengwar"
\mode     "Glaemscrafu"
\version  "0.1.1"
\authors  "Talagan (Benjamin Babut), based on J.R.R Tolkien"

\raw_mode "raw-tengwar"

\charset  tengwar_ds_sindarin true
\charset  tengwar_ds_parmaite false
\charset  tengwar_ds_eldamar  false
\charset  tengwar_ds_annatar  false
\charset  tengwar_ds_elfica   false
\charset  tengwar_freemono    false


\beg      options

  \beg option reverse_o_u_tehtar U_UP_O_DOWN
    \value O_UP_U_DOWN 1
    \value U_UP_O_DOWN 2
  \end

  \beg option long_vowels_format LONG_VOWELS_USE_LONG_CARRIER
    \value LONG_VOWELS_USE_LONG_CARRIER 1
    \value LONG_VOWELS_USE_DOUBLE_TEHTAR 2
  \end  

  \beg option double_tehta_e false
    \visible_when 'long_vowels_format == LONG_VOWELS_USE_DOUBLE_TEHTAR'
  \end
  \beg option double_tehta_i false
    \visible_when 'long_vowels_format == LONG_VOWELS_USE_DOUBLE_TEHTAR'
  \end
  \beg option double_tehta_o true
    \visible_when 'long_vowels_format == LONG_VOWELS_USE_DOUBLE_TEHTAR'
  \end
  \beg option double_tehta_u true
    \visible_when 'long_vowels_format == LONG_VOWELS_USE_DOUBLE_TEHTAR'
  \end
  
  \beg option consonant_modification_style CONSONANT_MODIFICATION_STYLE_BAR
    \value CONSONANT_MODIFICATION_STYLE_WAVE 0
    \value CONSONANT_MODIFICATION_STYLE_BAR 1
  \end

  \option reverse_numbers true
  \beg option numbers_base BASE_12
    \value    BASE_10 10
    \value    BASE_12 12
  \end
\end

\beg      preprocessor
  \** Work exclusively downcase **\
  \downcase
  
  \** Simplify trema vowels **\
  \substitute ä a
  \substitute ë e
  \substitute ï i
  \substitute ö o
  \substitute ü u
  \substitute ÿ y
  
  \** Dis-ambiguate long vowels **\
  \rxsubstitute "(ā|â|aa)" "á"
  \rxsubstitute "(ē|ê|ee)" "é" 
  \rxsubstitute "(ī|î|ii)" "í"
  \rxsubstitute "(ō|ô|oo)" "ó"
  \rxsubstitute "(ū|û|uu)" "ú"
  \rxsubstitute "(ȳ|ŷ|yy)" "ý"

  \substitute   "qu" "q" \** Dis-ambiguate qu **\
  
  \elvish_numbers "\\eval numbers_base" "\\eval reverse_numbers"
\end
  
\beg processor

  \beg rules litteral
                       
    {K}                 === (c,k)
    {W}                 === (v,w)
    {SS}                === (z,ss)
    
    \if "consonant_modification_style == CONSONANT_MODIFICATION_STYLE_WAVE"
      {GEMINATE} === GEMINATE_SIGN_TILD
    \else
      {GEMINATE} === GEMINATE_SIGN
    \endif
    
    {VOWELS}            === a               *  e              * i              * o              *  u
    {LVOWELS}           === á               *  é              * í              * ó              *  ú

    \if "reverse_o_u_tehtar == U_UP_O_DOWN"
      {O_LOOP}        === O_TEHTA
      {O_LOOP_DOUBLE} === O_TEHTA_DOUBLE
      {U_LOOP}        === U_TEHTA
      {U_LOOP_DOUBLE} === U_TEHTA_DOUBLE
    \else
      {O_LOOP}        === U_TEHTA
      {O_LOOP_DOUBLE} === U_TEHTA_DOUBLE
      {U_LOOP}        === O_TEHTA
      {U_LOOP_DOUBLE} === O_TEHTA_DOUBLE
    \endif

    \** Shape of the a, option removed from quenya, may be readded later **\
    {A_SHAPE}         === A_TEHTA

    \** Implicit a, option removed from quenya, may be readded later **\
    {_A_}              === {A_SHAPE}
    {_NVOWEL_}         === {NULL}
  
    {_TEHTAR_}          === {_A_}      *  E_TEHTA     *  I_TEHTA    * {O_LOOP}    *  {U_LOOP}

    \** Split diphtongs option removed from quenya, may be readded later **\
    {DIPHTHONGS}      === ai            * au            * eu            * iu             * oi               * ui
    {_DIPHTHONGS_}    === YANTA {_A_}   * URE {_A_}     * URE E_TEHTA   * URE I_TEHTA    * YANTA {O_LOOP}   * YANTA {U_LOOP}
    {WDIPHTHONGS}     === * {DIPHTHONGS}   \** groovy! **\
    {_WDIPHTHONGS_}   === * {_DIPHTHONGS_} \** same thing **\
    
		{_LONG_A_}      === ARA {A_SHAPE}
		{_LONG_E_}      === ARA E_TEHTA	
		{_LONG_I_}      === ARA I_TEHTA
		{_LONG_O_}      === ARA {O_LOOP}	
		{_LONG_U_}      === ARA {U_LOOP}
		{_LONE_LONG_A_} === {_LONG_A_}
		{_LONE_LONG_E_} === {_LONG_E_}
		{_LONE_LONG_I_} === {_LONG_I_}
		{_LONE_LONG_O_} === {_LONG_O_}
		{_LONE_LONG_U_} === {_LONG_U_}
    
    {LTEHTAR}       === {NULL}
    {_LTEHTAR_}     === {NULL} 				
 		
		\if "long_vowels_format == LONG_VOWELS_USE_DOUBLE_TEHTAR"
	    \if double_tehta_e
		    {_LONG_E_}       === E_TEHTA_DOUBLE
		    {_LONE_LONG_E_}  === TELCO {_LONG_E_}
        {LTEHTAR}        === {LTEHTAR}   * é
        {_LTEHTAR_}      === {_LTEHTAR_} * {_LONG_E_}
			\endif
		  \if double_tehta_i
		    {_LONG_I_}       === I_TEHTA_DOUBLE
		    {_LONE_LONG_I_}  === TELCO {_LONG_I_}
        {LTEHTAR}        === {LTEHTAR}   * í
        {_LTEHTAR_}      === {_LTEHTAR_} * {_LONG_I_}
		  \endif
		  \if double_tehta_o
		    {_LONG_O_}       === {O_LOOP_DOUBLE}
		    {_LONE_LONG_O_}  === TELCO {_LONG_O_}
        {LTEHTAR}        === {LTEHTAR}   * ó
        {_LTEHTAR_}      === {_LTEHTAR_} * {_LONG_O_}
		  \endif
		  \if double_tehta_u
		    {_LONG_U_}       === {U_LOOP_DOUBLE}
		    {_LONE_LONG_U_}  === TELCO {_LONG_U_}
        {LTEHTAR}        === {LTEHTAR}   * ú
        {_LTEHTAR_}      === {_LTEHTAR_} * {_LONG_U_}
		  \endif
    \endif  
       		
    \** images of long vowels, either tehtar or ara versions **\
    {_LVOWELS_}     === {_LONG_A_} * {_LONG_E_} * {_LONG_I_} * {_LONG_O_} * {_LONG_U_}      

		{WLONG}         === * {LVOWELS} 
		{_WLONG_}       === * {_LVOWELS_}

    {V_D}           === [ {VOWELS} {WLONG} {WDIPHTHONGS} ]
    {V_D_WN}        === [ {VOWELS} {WLONG} {WDIPHTHONGS} * {NULL} ]

    {_V_D_}         === [ {_TEHTAR_} {_WLONG_} {_WDIPHTHONGS_} ]
    {_V_D_WN_}      === [ {_TEHTAR_} {_WLONG_} {_WDIPHTHONGS_} * {_NVOWEL_} ]
		
		\** LONE SHORT VOWELS **\
    [{VOWELS}]    --> TELCO [{_TEHTAR_}]  \** Replace isolated short vowels **\
    
		\** LONE LONG VOWELS **\	
		[{LVOWELS}]   --> [{_LONE_LONG_A_} * {_LONE_LONG_E_} * {_LONE_LONG_I_} * {_LONE_LONG_O_} * {_LONE_LONG_U_}]

    [{DIPHTHONGS}]    -->   [{_DIPHTHONGS_}]     \**  Replace diphthongs **\
    
  
    \** TELERIN: changed v/w, removed all y rules **\
    
    \** ===================== **\
    \** 1ST LINE RULES **\
    \** ===================== **\
    {L1}          === {K}   * q      * t       * p 
    {_L1_}        === CALMA * QUESSE * TINCO   * PARMA
    
    {L1_GEMS}     === {K}{K}              * tt                     * pp
    {_L1_GEMS_}   === CALMA {GEMINATE} * TINCO {GEMINATE}    * PARMA {GEMINATE}

    \** NORMAL **\
    [ {L1} ] {V_D_WN}         --> [ {_L1_} ] {_V_D_WN_}
    [ {L1_GEMS} ] {V_D_WN}    --> [ {_L1_GEMS_} ] {_V_D_WN_}
                            
    ts{V_D_WN}          --> TINCO ALVEOLAR_SIGN {_V_D_WN_} 
    ps{V_D_WN}          --> PARMA ALVEOLAR_SIGN {_V_D_WN_}
    {K}s{V_D_WN}        --> CALMA ALVEOLAR_SIGN {_V_D_WN_}   
    x{V_D_WN}           --> CALMA ALVEOLAR_SIGN {_V_D_WN_}   \** render ks for x **\
                            
    \** ===================== **\
    \** 2ND LINE RULES **\
    \** ===================== **\
    {L2}        === nd      * mb        * ng      *  ngw    * d      * b        * g
    {_L2_}      === ANDO    * UMBAR     * ANGA    *  UNGWE  * ORE    * VALA     * ANNA
    
    \** STANDARD **\
    [{L2}]{V_D_WN}  --> [{_L2_}]{_V_D_WN_}

    \** ===================== **\
    \** 3RD LINE RULES **\
    \** ===================== **\
    {L3}    === th     * f      * h      * hw
    {_L3_}  === SULE   * FORMEN * AHA    * HWESTA

    \** NORMAL **\
    [{L3}]{V_D_WN}  --> [{_L3_}]{_V_D_WN_}
      
    \** Override h with vowels (descendent) **\
    _h{V_D}         --> HYARMEN {_V_D_}
    \** Starting voiced h before long vowels **\
    _h[{LVOWELS}]   --> HYARMEN [{_LVOWELS_}]

    (h,χ)           --> AHA

    \** ===================== **\
    \** 4TH LINE RULES **\
    \** ===================== **\
    {L4}    === nt    * mp    * nc    * nq      \** Not nqu, due to preprocessor **\
    {_L4_}  === ANTO  * AMPA  * ANCA  * UNQUE
 
    \** NORMAL **\
    [{L4}]{V_D_WN}    --> [{_L4_}]{_V_D_WN_}

    \** ===================== **\
    \** 5TH LINE RULES **\
    \** ===================== **\
    {L5}    === n     * m     * ñ     * ñw      * _nw 
    {_L5_}  === NUMEN * MALTA * NOLDO * NWALME  * NWALME

    [{L5}]{V_D_WN}  --> [{_L5_}]{_V_D_WN_}

    nn{V_D_WN}          --> NUMEN {GEMINATE} {_V_D_WN_}
    mm{V_D_WN}          --> MALTA {GEMINATE} {_V_D_WN_}

    \** ===================== **\
    \** 6TH LINE RULES **\
    \** ===================== **\
    {L6}        === r     * {W}  
    {_L6_}      === ROMEN * VILYA 

    [{L6}]{V_D_WN} --> [{_L6_}]{_V_D_WN_}

    rr{V_D_WN}        --> ROMEN {GEMINATE} {_V_D_WN_}
    rd{V_D_WN}        --> ARDA {_V_D_WN_}

    \** ===================== **\
    \** L   LINE RULES **\
    \** ===================== **\
    {LINE_L}          === l     * ld      * ll
    {_LINE_L_}        === LAMBE * ALDA    * LAMBE {GEMINATE}

    [{LINE_L}]{V_D_WN}    --> [{_LINE_L_}]{_V_D_WN_}

    hl{V_D_WN}            --> HALLA LAMBE {_V_D_WN_}
    hr{V_D_WN}            --> HALLA ROMEN {_V_D_WN_}
    
    \** ===================== **\
    \** S/Z LINE RULES **\
    \** ===================== **\
    {L8}              === s               * {SS}
    {_L8_TEHTAR_}     === SILME_NUQUERNA  * ESSE_NUQUERNA
    {_L8_NO_TEHTAR_}  === SILME           * ESSE

    [{L8}][{VOWELS}]   --> [{_L8_TEHTAR_}][{_TEHTAR_}]
    [{L8}][{LTEHTAR}]  --> [{_L8_TEHTAR_}][{_LTEHTAR_}]
    
    {L8}               --> {_L8_NO_TEHTAR_}
    {L8}[{DIPHTHONGS}] --> {_L8_NO_TEHTAR_}[{_DIPHTHONGS_}]
  \end
  
  \beg rules punctuation
    . --> PUNCT_DDOT
    .. --> PUNCT_DOT PUNCT_DDOT PUNCT_DOT
    …  --> PUNCT_TILD
    ... --> PUNCT_TILD
    .... --> PUNCT_TILD
    ..... --> PUNCT_TILD
    ...... --> PUNCT_TILD
    ....... --> PUNCT_TILD

    , --> PUNCT_DOT
    : --> PUNCT_DOT
    ; --> PUNCT_DOT
    ! --> PUNCT_EXCLAM
    ? --> PUNCT_INTERR
    · --> PUNCT_DOT

    \** Apostrophe **\

    ' --> {NULL}
    ’ --> {NULL}

    \** Quotes **\

    “ --> DQUOT_OPEN
    ” --> DQUOT_CLOSE
    « --> DQUOT_OPEN 
    » --> DQUOT_CLOSE 
    
    - --> {NULL}
    – --> PUNCT_TILD  
    — --> PUNCT_TILD

    [ --> PUNCT_PAREN_L
    ] --> PUNCT_PAREN_R
    ( --> PUNCT_PAREN_L
    ) --> PUNCT_PAREN_R
    { --> PUNCT_PAREN_L
    } --> PUNCT_PAREN_R
    < --> PUNCT_PAREN_L
    > --> PUNCT_PAREN_R  

    \** Not universal between fonts ... **\
    $ --> BOOKMARK_SIGN
    ≤ --> RING_MARK_L \** Ring inscription left beautiful stuff **\
    ≥ --> RING_MARK_R \** Ring inscription right beautiful stuff **\
 
  \end
  
  \beg rules numbers
    0 --> NUM_0
    1 --> NUM_1
    2 --> NUM_2
    3 --> NUM_3
    4 --> NUM_4
    5 --> NUM_5
    6 --> NUM_6
    7 --> NUM_7
    8 --> NUM_8
    9 --> NUM_9
    A --> NUM_10
    B --> NUM_11      
  \end
\end

\beg postprocessor
  \resolve_virtuals
\end  
