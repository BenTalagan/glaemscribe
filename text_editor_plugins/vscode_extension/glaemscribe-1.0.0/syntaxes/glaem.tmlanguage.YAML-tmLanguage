fileTypes:
    - glaem
name: Glaemscribe Mode
repository:
    keyword:
        match: '[a-zA-Z0-9_]'
        name: keyword.symbol
    operator:
        match: '[=!<>&\|\+\-\*\/]+'
        name: keyword.operator.assignment
    keyword-or-operator:
        patterns:
            - include: '#keyword'
            - include: '#operator'
    comment-block:
        begin: '\\\*\*'
        end: '\*\*\\'
        name: comment.block
    comment-or-space-middle:
        match: '(?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?'
        name: comment.block
    comment-or-space-end:
        match: '(?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$'
        name: comment
    changelog-entry-statement:
        match: '(\\entry)((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)((?:\"(?:[^\"]*?)\")|(?:[^\s]+))((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)(\"[^\"]*?\")((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        captures:
            '1':
                name: entity.name.function
            '2':
                name: comment
            '3':
                name: string
            '4':
                name: comment
            '5':
                name: string
            '6':
                name: comment
    changelog-block:
        begin: '(\\beg)((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)(changelog)((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        end: '(\\end)((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        beginCaptures:
            '1':
                name: entity.name.type.module
            '2':
                name: comment
            '3':
                name: entity.name.function
            '4':
                name: comment
        endCaptures:
            '1':
                name: entity.name.type.module
            '2':
                name: comment
        patterns:
            - include: '#changelog-entry-statement'
            - include: '#comment-block'
    info-statement:
        match: '(\\(?:(?!(?:entry|charset|beg|end|value|option|radio|visible_when|downcase|elvish_numbers|up_down_tehta_split|substitute|rxsubstitute|if|else|elsif|endif|deploy|reverse|resolve_virtuals)\b)[a-zA-Z_])*)((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)([^\s]+|(?:\"[^\"]*?\"))((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        captures:
            '1':
                name: entity.name.function
            '2':
                name: comment
            '3':
                name: string
            '4':
                name: comment
    charset-statement:
        match: '(\\charset)((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)(\b[a-zA-Z0-9_]+\b)((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)(true|false)((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        captures:
            '1':
                name: entity.name.function
            '2':
                name: comment
            '3':
                name: keyword.symbol
            '4':
                name: comment
            '5':
                name: constant.numeric
            '6':
                name: comment
    eval-expression:
        match: '(\\\\eval)\s+(.*)'
        captures:
            '1':
                name: entity.name.type.module
            '2':
                patterns:
                    - include: '#keyword-or-operator'
    option-statement:
        match: '(\\option)((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)(\b[a-zA-Z0-9_]+\b)((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)(true|false)((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        captures:
            '1':
                name: entity.name.function
            '2':
                name: comment
            '3':
                name: keyword.symbol
            '4':
                name: comment
            '5':
                name: constant.numeric
            '6':
                name: comment
    option-no-arg-statement:
        match: '(\\(?:radio))((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        captures:
            '1':
                name: entity.name.function
            '2':
                name: comment
    option-visible_when-statement:
        match: '(\\visible_when)((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)(?:(\"([^\"]*?)\")|([a-zA-Z0-9_!]+))((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        captures:
            '1':
                name: entity.name.function
            '2':
                name: comment
            '3':
                name: string
            '4':
                patterns:
                    - include: '#keyword-or-operator'
            '5':
                name: keyword.symbol
            '6':
                name: comment
    option-value-statement:
        match: '(\\value)((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)(\b[a-zA-Z0-9_]+\b)((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)(\b[0-9]+\b)((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        captures:
            '1':
                name: entity.name.function
            '2':
                name: comment
            '3':
                name: keyword.symbol
            '4':
                name: comment
            '5':
                name: constant.numeric
            '6':
                name: comment
    option-block:
        begin: '(\\beg)((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)(option)((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)(\b[a-zA-Z0-9_]+\b)((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)(\b[a-zA-Z0-9_]+\b)((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        end: '(\\end)((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        beginCaptures:
            '1':
                name: entity.name.type.module
            '2':
                name: comment
            '3':
                name: entity.name.function
            '4':
                name: comment
            '5':
                name: keyword.symbol
            '6':
                name: comment
            '7':
                name: variable.parameter
            '8':
                name: comment
        endCaptures:
            '1':
                name: entity.name.type.module
            '2':
                name: comment
        patterns:
            - include: '#option-no-arg-statement'
            - include: '#option-visible_when-statement'
            - include: '#option-value-statement'
            - include: '#comment-block'
    options-block:
        begin: '(\\beg)((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)(options)((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        end: '(\\end)((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        beginCaptures:
            '1':
                name: entity.name.type.module
            '2':
                name: comment
            '3':
                name: entity.name.function
            '4':
                name: comment
        endCaptures:
            '1':
                name: entity.name.type.module
            '2':
                name: comment
        patterns:
            - include: '#option-block'
            - include: '#option-statement'
            - include: '#comment-block'
    downcase-statement:
        match: '(\\downcase)((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        captures:
            '1':
                name: entity.name.function
            '2':
                name: comment
    elvish_numbers-statement:
        match: '(\\elvish_numbers)((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)(\b0*(?:[2-9]|1[0-6])\b|\"[^\"]*?\")((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)(true|false|\"[^\"]*?\")((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        captures:
            '1':
                name: entity.name.function
            '2':
                name: comment
            '3':
                patterns:
                    -
                        match: '(0*(?:[2-9]|1[0-6]))|(\"[^\"]*?\")'
                        captures:
                            '1':
                                name: constant.numeric
                            '2':
                                name: string
                                patterns:
                                    - include: '#eval-expression'
            '4':
                name: comment
            '5':
                patterns:
                    -
                        match: '(true|false)|(\"[^\"]*?\")'
                        captures:
                            '1':
                                name: constant.numeric
                            '2':
                                name: string
                                patterns:
                                    - include: '#eval-expression'
            '6':
                name: comment
    up_down_tehta_split-statement:
        match: '(\\up_down_tehta_split)((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)(\"[^\"]*?\")((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)(\"[^\"]*?\")((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        captures:
            '1':
                name: entity.name.function
            '2':
                name: comment
            '3':
                name: string
                patterns:
                    - include: '#eval-expression'
            '4':
                name: comment
            '5':
                name: string
                patterns:
                    - include: '#eval-expression'
            '6':
                name: comment
    substitute-statement:
        match: '(\\(?:substitute|rxsubstitute))((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)([^\s]+|(?:\"[^\"]*?\"))((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)([^\s]+|(?:\"[^\"]*?\"))((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        captures:
            '1':
                name: entity.name.function
            '2':
                name: comment
            '3':
                name: string
                patterns:
                    - include: '#eval-expression'
            '4':
                name: comment
            '5':
                name: string
                patterns:
                    - include: '#eval-expression'
            '6':
                name: comment
    else-statement:
        match: '(\\else)((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        captures:
            '1':
                name: entity.name.type.module
            '2':
                name: comment
    elsif-statement:
        match: '(\\elsif)((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)(?:(\"([^\"]*?)\")|([a-zA-Z0-9_!]+))((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        captures:
            '1':
                name: entity.name.type.module
            '2':
                name: comment
            '3':
                name: string
            '4':
                patterns:
                    - include: '#keyword-or-operator'
            '5':
                name: keyword.symbol
            '6':
                name: comment
    preprocessor-if-block:
        begin: '(\\if)((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)(?:(\"([^\"]*?)\")|([a-zA-Z0-9_!]+))((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        end: '(\\endif)((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        beginCaptures:
            '1':
                name: entity.name.type.module
            '2':
                name: comment
            '3':
                name: string
            '4':
                patterns:
                    - include: '#keyword-or-operator'
            '5':
                name: keyword.symbol
            '6':
                name: comment
        endCaptures:
            '1':
                name: entity.name.type.module
            '2':
                name: comment
        patterns:
            - include: '#else-statement'
            - include: '#elsif-statement'
            - include: '#preprocessor-patterns'
    preprocessor-patterns:
        patterns:
            - include: '#comment-block'
            - include: '#downcase-statement'
            - include: '#elvish_numbers-statement'
            - include: '#up_down_tehta_split-statement'
            - include: '#substitute-statement'
            - include: '#preprocessor-if-block'
    preprocessor-block:
        begin: '(\\beg)((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)(preprocessor)((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        end: '(\\end)((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        beginCaptures:
            '1':
                name: entity.name.type.module
            '2':
                name: comment
            '3':
                name: entity.name.function
            '4':
                name: comment
        endCaptures:
            '1':
                name: entity.name.type.module
            '2':
                name: comment
        patterns:
            - include: '#preprocessor-patterns'
    postprocessor-if-block:
        begin: '(\\if)((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)(?:(\"([^\"]*?)\")|([a-zA-Z0-9_!]+))((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        end: '(\\endif)((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        beginCaptures:
            '1':
                name: entity.name.type.module
            '2':
                name: comment
            '3':
                name: string
            '4':
                patterns:
                    - include: '#keyword-or-operator'
            '5':
                name: keyword.symbol
            '6':
                name: comment
        endCaptures:
            '1':
                name: entity.name.type.module
            '2':
                name: comment
        patterns:
            - include: '#else-statement'
            - include: '#elsif-statement'
            - include: '#postprocessor-patterns'
    postprocessor-statement:
        match: '(\\(?:reverse|resolve_virtuals))((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        captures:
            '1':
                name: entity.name.function
            '2':
                name: comment
    postprocessor-patterns:
        patterns:
            - include: '#comment-block'
            - include: '#postprocessor-if-block'
            - include: '#postprocessor-statement'
    postprocessor-block:
        begin: '(\\beg)((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)(postprocessor)((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        end: '(\\end)((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        beginCaptures:
            '1':
                name: entity.name.type.module
            '2':
                name: comment
            '3':
                name: entity.name.function
            '4':
                name: comment
        endCaptures:
            '1':
                name: entity.name.type.module
            '2':
                name: comment
        patterns:
            - include: '#postprocessor-patterns'
    processor-if-block:
        begin: '(\\if)((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)(?:(\"([^\"]*?)\")|([a-zA-Z0-9_!]+))((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        end: '(\\endif)((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        beginCaptures:
            '1':
                name: entity.name.type.module
            '2':
                name: comment
            '3':
                name: string
            '4':
                patterns:
                    - include: '#keyword-or-operator'
            '5':
                name: keyword.symbol
            '6':
                name: comment
        endCaptures:
            '1':
                name: entity.name.type.module
            '2':
                name: comment
        patterns:
            - include: '#else-statement'
            - include: '#elsif-statement'
            - include: '#processor-patterns'
    unicode:
        match: '{UNI_[0-9A-F]{3,}}'
        name: constant.numeric
    symbol:
        match: 'identity|{(?:NULL|NBSP|WJ|ZWSP|ZWNJ|UNDERSCORE|ASTERISK|COMMA|LPAREN|RPAREN|LBRACKET|RBRACKET)}'
        name: keyword.symbol
    variable:
        match: '{(?:(?!(?:NULL|NBSP|WJ|ZWSP|ZWNJ|UNDERSCORE|ASTERISK|COMMA|LPAREN|RPAREN|LBRACKET|RBRACKET)(?:$|}))[A-Z0-9_]*)}'
        name: variable
    fragment:
        patterns:
            - include: '#comment-block'
            - include: '#unicode'
            - include: '#symbol'
            - include: '#variable'
    simple-equivalence-expression:
        patterns:
            - include: '#fragment'
            -
                match: '\,'
                name: entity.name.function
    equivalence-expression:
        match: '(\()([^\(\)]*?)(\))'
        captures:
            '1':
                name: entity.name.function
            '2':
                patterns:
                    - include: '#simple-equivalence-expression'
            '3':
                name: entity.name.function
    simple-linkable-expression:
        patterns:
            - include: '#fragment'
            - include: '#equivalence-expression'
            -
                match: '\*'
                name: entity.name.type.class
    linkable-expression:
        match: '(\[)([^\[\]]*?)(\])'
        captures:
            '1':
                name: entity.name.type.class
            '2':
                patterns:
                    - include: '#simple-linkable-expression'
            '3':
                name: entity.name.type.class
    rule-and-variable-statement:
        patterns:
            - include: '#comment-block'
            - include: '#simple-linkable-expression'
            - include: '#linkable-expression'
            - include: '#simple-equivalence-expression'
            - include: '#equivalence-expression'
            -
                match: '-->|===|<=>'
                name: keyword.operator.assignment
    processor-patterns:
        patterns:
            - include: '#comment-block'
            - include: '#processor-if-block'
            - include: '#rule-and-variable-statement'
            - include: '#processor-macro-block'
            - include: '#deploy-statement'
    processor-macro-block:
        begin: '(\\beg)((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)(macro)((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)(\b[a-zA-Z0-9_]+\b)((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)(?:(?:(\b[A-Z0-9_]+\b)((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$))|(.+))'
        end: '(\\end)((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        beginCaptures:
            '1':
                name: entity.name.type.module
            '2':
                name: comment
            '3':
                name: entity.name.function
            '4':
                name: comment
            '5':
                name: keyword.symbol
            '6':
                name: comment
            '7':
                name: variable
            '8':
                name: comment
            '9':
                patterns:
                    - include: '#comment-block'
                    -
                        match: '\b[A-Z0-9_]+\b'
                        name: variable
        endCaptures:
            '1':
                name: entity.name.type.module
            '2':
                name: comment
        patterns:
            - include: '#processor-patterns'
    deploy-statement:
        match: '(\\deploy)((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)(\b[a-zA-Z-0-9]+\b)((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)({[A-Z0-9_]+})((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)(.+)'
        captures:
            '1':
                name: entity.name.function
            '2':
                name: comment
            '3':
                name: keyword.symbol
            '4':
                name: comment
            '5':
                name: variable.parameter
            '6':
                name: comment
            '7':
                patterns:
                    - include: '#fragment'
    processor-rule-block:
        begin: '(\\beg)((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)(rules)((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)(?:(\"(?:[^\"]*?)\")|([a-zA-Z0-9_!]+))((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        end: '(\\end)((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        beginCaptures:
            '1':
                name: entity.name.type.module
            '2':
                name: comment
            '3':
                name: entity.name.function
            '4':
                name: comment
            '5':
                name: string
            '6':
                name: keyword.symbol
            '7':
                name: comment
        endCaptures:
            '1':
                name: entity.name.type.module
            '2':
                name: comment
        patterns:
            - include: '#processor-patterns'
    processor-block:
        begin: '(\\beg)((?:\s|(?:\\\*\*(?:[^\*\n\r]|(?:\*+[^\*\\\n\r]))*?\*\*+?\\))+?)(processor)((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        end: '(\\end)((?:\s*?$)|(?:\s*?\\\*\*(?:[^\*]|(?:\*+?[^\*\\]))*?\*\*+?\\)*?\s*?$)'
        beginCaptures:
            '1':
                name: entity.name.type.module
            '2':
                name: comment
            '3':
                name: entity.name.function
            '4':
                name: comment
        endCaptures:
            '1':
                name: entity.name.type.module
            '2':
                name: comment
        patterns:
            - include: '#processor-rule-block'
patterns:
    - include: '#comment-block'
    - include: '#info-statement'
    - include: '#charset-statement'
    - include: '#changelog-block'
    - include: '#options-block'
    - include: '#preprocessor-block'
    - include: '#postprocessor-block'
    - include: '#processor-block'
scopeName: source.glaem
uuid: F261BD11-1AF3-441E-A074-3B0A4C65F61E
